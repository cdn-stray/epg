# 全部写绝对路径!
[uwsgi]
# the local unix socket file than commnuincate to Nginx   用于和 nginx 进行数据交互的端口
socket = 127.0.0.1:22200
# the base directory (full path)  django 程序的主目录
chdir = /mxdyeah/epg
# Django's wsgi file
wsgi-file = /mxdyeah/epg/epg/wsgi.py
# maximum number of worker processes
processes = 4
# thread numbers startched in each worker process
threads = 8
# clear environment on exit
vacuum = true
# 后台运行,并输出日志
daemonize = /mxdyeah/epg/uwsgi/uwsgi.log
# pid 文件地址
pidfile=/mxdyeah/epg/uwsgi/uwsgi.pid
# 启用主进程来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
master=true
# 启用线程 允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads=true
# 当服务停止的时候自动移除unix Socket和pid文件
vacuum=true
# 不记录信息日志，只记录错误以及uwsgi内部消息
disable-logging=true
# 设置最大日志文件大小
log-maxsize = 5000000
# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏
# 默认50W是上限
max-requests = 500000
# 一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
harakiri = 60

